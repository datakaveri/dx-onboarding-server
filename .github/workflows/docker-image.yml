# This github workflow will automatically update docker image tags of onboarding-server-depl in the datakaveri/iudx-deployment repository files, whenever docker image is pushed to ghcr.io/datakaveri/onboarding-server-depl .Based on tag it will update the master/latest branch (if its 1.0.2-alpha-) or 1.0.1 stable branch (if its 1.0.1-)
name: Update Onboarding server docker image tags

# This trigger will run the workflow whenever a new package is published to the registry
on:
  registry_package:
    types: [published]

# This is needed to read the registry packages    
permissions:
  packages: read

jobs:

  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3
      with:
       repository: datakaveri/iudx-deployment
       # Jenkins token to perform git operations
       token: "${{ secrets.JENKINS_UPDATE }}"
       fetch-depth: 0

     # This step updates the Onboarding server docker image tags   
    - name: Update Onboarding server docker image tags
      env: 
        GH_TOKEN: ${{ secrets.JENKINS_UPDATE}}
      run: | 
        # Get the latest version of 1.0.1 and 1.0.2-alpha tags from the container registry using GitHub API
        export newtag1_0_1=`(head -n 1 <(curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/orgs/datakaveri/packages/container/onboarding-server-depl/versions | jq ' .[].metadata.container.tags[0]'  | grep 1.0.1 | grep -v alpha | sed -e 's/^"//' -e 's/"$//'))`
        export newtag1_0_2=`(head -n 1 <(curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/orgs/datakaveri/packages/container/onboarding-server-depl/versions | jq ' .[].metadata.container.tags[0]'  | grep 1.0.2-alpha | sed -e 's/^"//' -e 's/"$//'))`
        
        # Get the old tags from the YAML files
        export oldtag1_0_2=`yq -r .services.onboarding-server.image Docker-Swarm-deployment/single-node/onboarding-server/onboarding-server-stack.yaml | cut -d : -f 2`
        git checkout 1.0.1
        export oldtag1_0_1=$(yq -r .services.onboarding-server.image Docker-Swarm-deployment/single-node/onboarding-server/onboarding-server-stack.yaml | cut -d : -f 2)      
        
        # Set Git user
        git config --global user.name 'jenkins-datakaveri'
        git config --global user.email "96175780+jenkins-datakaveri@users.noreply.github.com"


        # Update the YAML files and create a new branch for each tag update
        if [ "$newtag1_0_1" != "$oldtag1_0_1" ]
        then
         git checkout -b onboarding-server-1.0.1-automatic-updates/$newtag1_0_1

          # Uses sed to find and replace $oldtag1_0_1 with $newtag1_0_1 in Docker-Swarm-deployment/single-node/onboarding-server/onboarding-server-stack.yaml file
         sed -i s/$oldtag1_0_1/$newtag1_0_1/g Docker-Swarm-deployment/single-node/onboarding-server/onboarding-server-stack.yaml

         # Exports the current version of the application from K8s-deployment/Charts/onboarding-server/Chart.yaml file
         export oldappversion=`yq -r .version K8s-deployment/Charts/onboarding-server/Chart.yaml`

         # Uses awk to increment the version number in K8s-deployment/Charts/onboarding-server/Chart.yaml file
         export newappversion=`yq -r .version K8s-deployment/Charts/onboarding-server/Chart.yaml | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}' `
         
         # Uses sed to find and replace $oldappversion with $newappversion in K8s-deployment/Charts/onboarding-server/Chart.yaml and K8s-deployment/Charts/onboarding-server/values.yaml files
         sed -i s/$oldappversion/$newappversion/g K8s-deployment/Charts/onboarding-server/Chart.yaml
         sed -i s/$oldtag1_0_1/$newtag1_0_1/g K8s-deployment/Charts/onboarding-server/values.yaml
         git add Docker-Swarm-deployment/single-node/onboarding-server/onboarding-server-stack.yaml K8s-deployment/Charts/onboarding-server/values.yaml K8s-deployment/Charts/onboarding-server/Chart.yaml
         git commit --allow-empty -m "updated onboarding server docker image tag to $newtag1_0_1"
         git push --set-upstream origin onboarding-server-1.0.1-automatic-updates/$newtag1_0_1

         # Creates a new pull request on the datakaveri/iudx-deployment repository with the base branch 1.0.1
         gh pr create -R datakaveri/iudx-deployment --base 1.0.1 --fill 
        fi
        
        if [ "$newtag1_0_2" != "$oldtag1_0_2" ]
        then
         git checkout master
         git checkout -b onboarding-server-automatic-updates/$newtag1_0_2

         # Uses sed to find and replace $oldtag1_0_2 with $newtag1_0_2 in Docker-Swarm-deployment/single-node/onboarding-server/onboarding-server-stack.yaml file
         sed -i s/$oldtag1_0_2/$newtag1_0_2/g Docker-Swarm-deployment/single-node/onboarding-server/onboarding-server-stack.yaml
         
         # Exports the current version of the application from K8s-deployment/Charts/onboarding-server/Chart.yaml file
         export oldappversion=`yq -r .version K8s-deployment/Charts/onboarding-server/Chart.yaml`
         
         # Uses awk to increment the version number in K8s-deployment/Charts/onboarding-server/Chart.yaml file
         export newappversion=`yq -r .version K8s-deployment/Charts/onboarding-server/Chart.yaml | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}' `
         
         # Uses sed to find and replace $oldappversion with $newappversion in K8s-deployment/Charts/onboarding-server/Chart.yaml and K8s-deployment/Charts/onboarding-server/values.yaml files
         sed -i s/$oldappversion/$newappversion/g K8s-deployment/Charts/onboarding-server/Chart.yaml
         sed -i s/$oldtag1_0_2/$newtag1_0_2/g K8s-deployment/Charts/onboarding-server/values.yaml
         git add Docker-Swarm-deployment/single-node/onboarding-server/onboarding-server-stack.yaml K8s-deployment/Charts/onboarding-server/values.yaml K8s-deployment/Charts/onboarding-server/Chart.yaml
         git commit --allow-empty -m "updated onboarding server docker image tag to $newtag1_0_2"
         git push --set-upstream origin onboarding-server-automatic-updates/$newtag1_0_2
         
         # Creates a new pull request on the datakaveri/iudx-deployment repository with the base branch master
         gh pr create -R datakaveri/iudx-deployment --base master --fill 
        fi